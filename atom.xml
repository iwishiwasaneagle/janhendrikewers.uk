<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">Jan-Hendrik Ewers</title>
    <link type="application/atom+xml" rel="self" href="https://janhendrikewers.uk/atom.xml"/>
  
  <link href="https://janhendrikewers.uk/"/>
  <id>https://janhendrikewers.uk/</id>
  <updated>2023-04-19T12:56:03Z</updated>
  <author>
    <name>Jan-Hendrik Ewers</name>
    <email>j.ewers.1@research.gla.ac.uk</email>
  </author>
  <rights type="text">Copyright © 2023 Jan-Hendrik Ewers. All rights reserved.</rights>
  
  <entry>
    <title type="text">Hosting Plausible Analytics On A Raspberry Pi 4 with SSL</title>
    <link rel="alternate" type="text/html" href="https://janhendrikewers.uk/plausible_analytics_on_a_raspberry_pi_with_SSL.html/?source=RSS" />
    <id>https://janhendrikewers.uk/plausible_analytics_on_a_raspberry_pi_with_SSL</id>
    <published>2023-04-19T00:00:00Z</published>
    <updated>2023-04-19T00:00:00Z</updated>
    <content type="html"><![CDATA[ <p>Plausible is a great alternative to Google Analytics if you want to havbe the option of analytics but actually respect your users privacy. Along with that bold statement, Plausible actually offers a whole range of benefits:</p>

<ul>
  <li>Guaranteed to be in the region you expect it to be
    <ul>
      <li>EU if not self-hosted, else whereever you desire</li>
      <li>This is especially true for GDPR and other data collection laws</li>
    </ul>
  </li>
  <li><a href="https://plausible.io/lightweight-web-analytics#how-do-web-analytics-scripts-affect-the-page-size-and-page-load-time">Substantially lower script size</a> for faster loading times</li>
  <li>No cookie tracking or other invasive methods used</li>
</ul>

<p>Now, the fine folks at Plausible have already created amazing documentation on how to get up and running with <a href="https://github.com/plausible/hosting/tree/master">plausible/hosting</a>. However, this uses an outdated docker image that does not support the Raspberry Pi 4. Therefore, we have this wee guide!</p>

<h2 id="step-1-the-config-repo">Step 1: The Config Repo</h2>

<p>As mentioned above, the original repo does not truly support the RPi4, and until <a href="https://github.com/plausible/hosting/pull/70">PR#70</a> is merged, you can get a working configuration at my fork: <a href="https://github.com/iwishiwasaneagle/plausible-hosting-rpi">iwishiwasaneagle/plausible-hosting-rpi</a></p>

<h2 id="step-2-run-it">Step 2: Run it!</h2>

<p>This is simple, <code class="language-plaintext highlighter-rouge">cd</code> into the directory, follow the steps <a href="https://plausible.io/docs/self-hosting#2-add-required-configuration">here</a> to generate a random secret key, and run <code class="language-plaintext highlighter-rouge">docker compose up -d</code></p>

<p>Is that it? Well, technically yes but also no. First of all, head to <code class="language-plaintext highlighter-rouge">http://localhost:8000</code> and this should outline some issues. Plausible is running perfectly but on <code class="language-plaintext highlighter-rouge">localhost</code> and without SSL. This means you won’t be able to integrate Plausible into your website in any meaningful manner, and not securely.</p>

<h2 id="step-3-the-rest-of-the-owl">Step 3. The Rest Of The Owl</h2>

<p>So, we now have a working instance accessible at <code class="language-plaintext highlighter-rouge">http://localhost:8000</code>. You either need a static IP and a DNS A or AAAA listing pointing at it, ooooor a dynamicDNS service like <a href="https://duckdns.org">DuckDNS</a>. There are millions of resources out there on how to set this up so I won’t bother.</p>

<p>Make sure you have your port <code class="language-plaintext highlighter-rouge">80</code> (HTTP) and <code class="language-plaintext highlighter-rouge">443</code> (HTTPS) forwarded (again, millions of tutorials, beyond the scope of this tutorial, blah blah blah) to your Raspberry Pi’s local IP address. This is critical to get your SSL certificate.</p>

<p>We will now edit our <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> to look like:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.3"</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">mail</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">docker-smtp/latest</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">internal</span>

  <span class="na">plausible_db</span><span class="pi">:</span>
    <span class="c1"># supported versions are 12, 13, and 14</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">postgres:14-alpine</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">internal</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db-data:/var/lib/postgresql/data</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">POSTGRES_PASSWORD=postgres</span>

  <span class="na">plausible_events_db</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">clickhouse/clickhouse-server:22.6-alpine</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">internal</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">event-data:/var/lib/clickhouse</span>
      <span class="pi">-</span> <span class="s">./clickhouse/clickhouse-config.xml:/etc/clickhouse-server/config.d/logging.xml:ro</span>
      <span class="pi">-</span> <span class="s">./clickhouse/clickhouse-user-config.xml:/etc/clickhouse-server/users.d/logging.xml:ro</span>
    <span class="na">ulimits</span><span class="pi">:</span>
      <span class="na">nofile</span><span class="pi">:</span>
        <span class="na">soft</span><span class="pi">:</span> <span class="m">262144</span>
        <span class="na">hard</span><span class="pi">:</span> <span class="m">262144</span>

  <span class="na">plausible</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">plausible/analytics:v1.5</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">sh -c "sleep 10 &amp;&amp; /entrypoint.sh db createdb &amp;&amp; /entrypoint.sh db migrate &amp;&amp; /entrypoint.sh run"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">expose</span>
      <span class="pi">-</span> <span class="s">internal</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">plausible_db</span>
      <span class="pi">-</span> <span class="s">plausible_events_db</span>
      <span class="pi">-</span> <span class="s">mail</span>
    <span class="na">env_file</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">plausible-conf.env</span>
  
  <span class="na">nginx</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./nginx/:/etc/nginx/conf.d</span>
      <span class="pi">-</span> <span class="s">./data/certbot/conf:/etc/letsencrypt</span>
      <span class="pi">-</span> <span class="s">./data/certbot/www:/var/www/certbot</span>
      <span class="pi">-</span> <span class="s">./nginx/error.log:/var/log/nginx/error.log</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">expose</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">80:80</span>
      <span class="pi">-</span> <span class="s">443:443</span>
    <span class="na">environment</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="s">NGINX_HOST=127.0.0.1</span>
     <span class="pi">-</span> <span class="s">NGINX_PORT=80</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/bin/sh</span><span class="nv"> </span><span class="s">-c</span><span class="nv"> </span><span class="s">'while</span><span class="nv"> </span><span class="s">:;</span><span class="nv"> </span><span class="s">do</span><span class="nv"> </span><span class="s">sleep</span><span class="nv"> </span><span class="s">6h</span><span class="nv"> </span><span class="s">&amp;</span><span class="nv"> </span><span class="s">wait</span><span class="nv"> </span><span class="s">$${!};</span><span class="nv"> </span><span class="s">nginx</span><span class="nv"> </span><span class="s">-s</span><span class="nv"> </span><span class="s">reload;</span><span class="nv"> </span><span class="s">done</span><span class="nv"> </span><span class="s">&amp;</span><span class="nv"> </span><span class="s">nginx</span><span class="nv"> </span><span class="s">-g</span><span class="nv"> </span><span class="se">\"</span><span class="s">daemon</span><span class="nv"> </span><span class="s">off;</span><span class="se">\"</span><span class="s">'"</span>

  <span class="na">certbot</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">certbot/certbot</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./data/certbot/conf:/etc/letsencrypt</span>
      <span class="pi">-</span> <span class="s">./data/certbot/www:/var/www/certbot</span>
    <span class="na">entrypoint</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/bin/sh</span><span class="nv"> </span><span class="s">-c</span><span class="nv"> </span><span class="s">'trap</span><span class="nv"> </span><span class="s">exit</span><span class="nv"> </span><span class="s">TERM;</span><span class="nv"> </span><span class="s">while</span><span class="nv"> </span><span class="s">:;</span><span class="nv"> </span><span class="s">do</span><span class="nv"> </span><span class="s">certbot</span><span class="nv"> </span><span class="s">renew;</span><span class="nv"> </span><span class="s">sleep</span><span class="nv"> </span><span class="s">12h</span><span class="nv"> </span><span class="s">&amp;</span><span class="nv"> </span><span class="s">wait</span><span class="nv"> </span><span class="s">$${!};</span><span class="nv"> </span><span class="s">done;'"</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">db-data</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">event-data</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">geoip</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>
  
<span class="na">networks</span><span class="pi">:</span>
  <span class="na">expose</span><span class="pi">:</span>
  <span class="na">internal</span><span class="pi">:</span>
</code></pre></div></div>

<p>The correct usage of the networks us key, otherwise the <code class="language-plaintext highlighter-rouge">nginx</code> container can’t access <code class="language-plaintext highlighter-rouge">plausible</code> which then won’t be accessible over the internet. Now <code class="language-plaintext highlighter-rouge">mkdir</code> two directories: <code class="language-plaintext highlighter-rouge">nginx</code> and <code class="language-plaintext highlighter-rouge">data</code>, and create the following file at <code class="language-plaintext highlighter-rouge">nginx/plausible.conf</code>:</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>

    <span class="kn">location</span> <span class="n">/.well-known/acme-challenge/</span> <span class="p">{</span>
      <span class="kn">root</span> <span class="n">/var/www/certbot</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
        <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kn">server_name</span> <span class="s">_</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
    <span class="kn">listen</span> <span class="s">[::]:443</span> <span class="s">ssl</span><span class="p">;</span>
    <span class="kn">server_name</span> <span class="s">yourdomain.com</span><span class="p">;</span>

    <span class="kn">ssl_certificate</span> <span class="n">/etc/letsencrypt/live/yourdomain.com/fullchain.pem</span><span class="p">;</span>
    <span class="kn">ssl_certificate_key</span> <span class="n">/etc/letsencrypt/live/yourdomain.com/privkey.pem</span><span class="p">;</span>
    <span class="kn">include</span> <span class="n">/etc/letsencrypt/options-ssl-nginx.conf</span><span class="p">;</span>
    <span class="kn">ssl_dhparam</span> <span class="n">/etc/letsencrypt/ssl-dhparams.pem</span><span class="p">;</span>

    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
        <span class="kn">proxy_pass</span> <span class="s">http://plausible:8000</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>It is now time to get your SSL certificate and to enable HTTPS on your Plausible instance. Download the <a href="https://github.com/wmnnd/nginx-certbot/blob/master/init-letsencrypt.sh"><code class="language-plaintext highlighter-rouge">init-letsencrypt.sh</code></a> and edit it to include your your domain name. Give it execution permissions via</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x init-letsencrupt.sh
</code></pre></div></div>

<p>and run it!</p>

<blockquote>
  <p>Be sure to change <code class="language-plaintext highlighter-rouge">BASE_URL</code> within <code class="language-plaintext highlighter-rouge">plausible-conf.env</code> to whatever yours is for Plausible to play nicely.</p>
</blockquote>

<h2 id="step-4-add-scriptjs-to-your-head">Step 4. Add script.js To Your <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code></h2>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">defer</span> <span class="na">data-domain=</span><span class="s">"yourdomain.com"</span> <span class="na">src=</span><span class="s">"https://yourdomain.com/js/script.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<p>If you are self-hsoting, which is probably why you’re reading this, it is important in my opinion that you <strong>DO NOT</strong> use the script located at <code class="language-plaintext highlighter-rouge">https://https://plausible.io/js/script.js</code>. You are not paying for any bandwidth, and therefore shouldn’t be freeloading. Use Cloudflare or another CDN if your private bandwidth is a concern.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Plausible was really simple to set up in workflow and I hope this guide has helped you. There are additional things you can consider doing which I’ll link below.
What I really appreciate about Plausible is not invading the privacy of the people visiting my website, whilst still giving me insight as to what is going on.</p>

<h2 id="additional-tips">Additional Tips</h2>

<ul>
  <li>Set <code class="language-plaintext highlighter-rouge">DISABLE_REGISTRATION=invite_only</code> to disable others from freely creating accounts</li>
  <li><a href="https://plausible.io/docs/script-extensions">Enable other extensions</a></li>
  <li><a href="https://plausible.io/docs/integration-guides">Use an integration</a></li>
  <li><a href="https://plausible.io/docs/goal-conversions">Set up goals and custom events</a></li>
</ul>
 ]]></content>
  </entry>

  <entry>
    <title type="text">How Your Psychological Profile Is Used In A Mountain Rescue Search</title>
    <link rel="alternate" type="text/html" href="https://janhendrikewers.uk/how_your_psychological_profile_is_used_in_a_mountain_rescue_search.html/?source=RSS" />
    <id>https://janhendrikewers.uk/how_your_psychological_profile_is_used_in_a_mountain_rescue_search</id>
    <published>2023-03-07T00:00:00Z</published>
    <updated>2023-03-07T00:00:00Z</updated>
    <content type="html"><![CDATA[ <p>When you (or actually, anyone) gets lost in the mountains, a group of experts get called out with one task: find you, and get you back to safety. They use a myriad of tools to do this, with the one we’ll focus on in this post being <strong>data</strong>.</p>

<hr />

<blockquote>
  <p><em>Note: I’m not a mountain rescue expert, so everything written here should be taken with a pinch of salt.</em></p>
</blockquote>

<hr />

<p>You may not know this, but lost people behave massively different based on their gender, age, health, and current activity. We know this from historical data gathered over hundreds of Search and Rescue (SAR) incidents carefully catalogued and processed by various groups (<a href="https://www.scottishmountainrescue.org/">SMR</a>, <a href="https://www.mountain.rescue.org.uk/">EWMR</a>, Police, <a href="https://www.dbs-sar.com/SAR_Research/ISRID.htm">ISRID</a>, etc.). This data is usually very top-level, like how long they were travelling for, where they were found, how far from a road were they found, etc.</p>

<p>Using this, we can construct a model that matches as closely as possible to the data and through this predict where a person might be found from a report last place seen (LPS). This model may not be anything formal, but rather to inform the search leader about where their searches need to look. If profile A is likely to be near a lake, then look near the lake! If profile B is highly likely to not travel longer than 5 hours, restrict your search area.</p>

<p>One data source that is commonly used throughout the UK is the <em>UK Missing Person Behaviour Study</em> <sup id="fnref:fn2" role="doc-noteref"><a href="#fn:fn2" class="footnote" rel="footnote">1</a></sup>. This tells us that <em>Children aged 1 to 16 years</em> have a $52\%$ chance of being found near building, and in comparison a person suffering from <em>Dementia</em> is only found near buildings $26\%$ of the time<sup id="fnref:fn1" role="doc-noteref"><a href="#fn:fn1" class="footnote" rel="footnote">2</a></sup>.</p>

<p>A caveat to this is that it’s important to make the distinction between environment types. Someone lost in the Scottish Highlands will have a much harder time traversing the terrain, than someone lost in Yorkshire. As well as this, there is usually no distinction made on time-of-day or the weather conditions In the data. However, through chatting to mountain rescue experts from the Lake District<sup id="fnref:fn3" role="doc-noteref"><a href="#fn:fn3" class="footnote" rel="footnote">3</a></sup>, they automatically search down-wind from the LPS as <em>who in their right mind walks into the wind when they’re already struggling to locate themselves or injured</em>.</p>

<p>Whilst you may never use this information, I find it really interesting to know what tools are being used by the experts saving lives. My current research is in the field of predicting and searching for lost people using <a href="https://github.com/iwishiwasaneagle/jdrones">drones</a>, so it’s nice to share a niche slice of my work.</p>

<hr />

<blockquote>
  <p><strong>N.B. (1)</strong>: The mountains are a beautiful, yet dangerous place. Mountain rescuers literally put their life on line to help people on the regular with (usually) no compensation. In Scotland, the individual teams rely on donations as the funding from the government is marginal. So please be careful and don’t take their efforts for granted.</p>

  <p><strong>N.B. (2):</strong> If this blog post piqued your interest about the niche that is mountain rescue, the book <em>Cairngorm John: a Life in Mountain Rescue</em> by John Allen is a fascinating insight into how search and rescue scenarios play out.</p>
</blockquote>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:fn2" role="doc-endnote">
      <p>D. Perkins, P. Roberts, G. Feeney, and P. Mrt, ‘The U.K. Missing Person Behaviour Study’, CSR, 2011, [Online]. Available: <a href="https://tcsr.org.uk/media/kushuk1a/uk-missing-person-behaviour-study-2011.pdf">https://tcsr.org.uk/media/kushuk1a/uk-missing-person-behaviour-study-2011.pdf</a> <a href="#fnref:fn2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:fn1" role="doc-endnote">
      <p>This is for the <em>farmland</em> terrain, and <em>female</em> gender for the dementia category. The child 1-16 category does not report on gender. <a href="#fnref:fn1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:fn3" role="doc-endnote">
      <p>Fun fact: Lake District Mountain Rescue don’t just search for humans, but animals too! <a href="#fnref:fn3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
 ]]></content>
  </entry>

  <entry>
    <title type="text">Pip Install From Private GitHub Repos</title>
    <link rel="alternate" type="text/html" href="https://janhendrikewers.uk/pip_install_from_private_repos.html/?source=RSS" />
    <id>https://janhendrikewers.uk/pip_install_from_private_repos</id>
    <published>2023-02-07T00:00:00Z</published>
    <updated>2023-02-07T00:00:00Z</updated>
    <content type="html"><![CDATA[ <p>I’m currently working on a <a href="https://github.com/iwishiwasaneagle/jdrones">library</a> that I’m not quite ready yet to open source. I use it for research, and as such need to be able to install it on other machines. Originally I was just cloning the repo and setting <code class="language-plaintext highlighter-rouge">PYTHONPATH</code> everywhere but this quickly became cumbersome. Below are the methods that I’ve discovered to install the library.</p>

<h2 id="https">HTTPS</h2>

<p>So you don’t want to set up SSH with a private key and all that jazz. Simply have a look at <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">this</a> guide to create a private access token (PAT) with <strong>read</strong> access to the private repo.</p>

<p>Then run the following</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>git+https://<span class="nv">$USERNAME</span>:<span class="nv">$PAT</span>@github.com/<span class="nv">$GH_USER</span>/<span class="nv">$REPO</span>.git@<span class="nv">$VERSION</span>
</code></pre></div></div>

<p>Some other guides online either omit the $USERNAME because it’s a new requirement or it used to work, but this is the only way it works for me these days <strong>without</strong> asking for my password.</p>

<h2 id="ssh">SSH</h2>

<p>This is by far the easiest method, but it does require that <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">SSH is linked to your github account</a>. If SSH is correctly set up, then run the following</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>git+ssh://git@github.com/<span class="nv">$GH_USER</span>/<span class="nv">$REPO</span>.git@<span class="nv">$VERSION</span>
</code></pre></div></div>

<h2 id="extra-info">Extra Info</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">$VERSION</code> can be a branch or tag</li>
  <li>PATs should <strong>always</strong> have the <strong>minimum</strong> permissions possible
    <ul>
      <li>GitHub’s new <a href="https://github.com/settings/tokens?type=beta">fine-grained tokens</a> give you per-repo control</li>
    </ul>
  </li>
  <li>Treat your PATs like a password. DO NOT SHARE</li>
</ul>
 ]]></content>
  </entry>

  <entry>
    <title type="text">Exploring Faster Alternatives To np.clip</title>
    <link rel="alternate" type="text/html" href="https://janhendrikewers.uk/exploring_faster_np_clip.html/?source=RSS" />
    <id>https://janhendrikewers.uk/exploring_faster_np_clip</id>
    <published>2023-01-24T00:00:00Z</published>
    <updated>2023-01-24T00:00:00Z</updated>
    <content type="html"><![CDATA[ <p>I was profiling some code I had written where <code class="language-plaintext highlighter-rouge">np.clip</code> was being called a couple hundreds of millions of times. The profiler was flagging some weird related functions that seemed unimportant so I delved deeper. Turns out that as of numpy 1.17, the <code class="language-plaintext highlighter-rouge">np.clip</code> has been substantially slower than previously which has been documented <a href="https://github.com/numpy/numpy/issues/14281">here</a>. This caught my curiosity and after some experimentation I found two substantially faster methods which in turn sped up my code by $50\%$!</p>

<p>Below is my log of what I tried, but if you just want results then <a href="#conclusion">here</a> is your link.</p>

<p><strong>Note</strong>: These tests were undertaken using numpy version <code class="language-plaintext highlighter-rouge">1.23.5</code>.</p>

<h2 id="scalar">Scalar</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">VMIN</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.5</span>
<span class="n">VMAX</span> <span class="o">=</span> <span class="mf">0.5</span>
<span class="n">X_scalar</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">()</span> <span class="o">-</span> <span class="mf">0.5</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">X_scalar</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="mf">11.3</span> <span class="n">µs</span> <span class="err">±</span> <span class="mi">202</span> <span class="n">ns</span> <span class="n">per</span> <span class="nf">loop </span><span class="p">(</span><span class="n">mean</span> <span class="err">±</span> <span class="n">std</span><span class="p">.</span> <span class="n">dev</span><span class="p">.</span> <span class="n">of</span> <span class="mi">7</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span><span class="mi">000</span> <span class="n">loops</span> <span class="n">each</span><span class="p">)</span>
</code></pre></div></div>

<p>Testing the baseline gave us a fairly decent time of $11.3\mu s$.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">core</span><span class="p">.</span><span class="n">umath</span><span class="p">.</span><span class="nf">maximum</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">core</span><span class="p">.</span><span class="n">umath</span><span class="p">.</span><span class="nf">minimum</span><span class="p">(</span><span class="n">X_scalar</span><span class="p">,</span> <span class="n">VMAX</span><span class="p">),</span> <span class="n">VMIN</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="mf">2.25</span> <span class="n">µs</span> <span class="err">±</span> <span class="mf">64.6</span> <span class="n">ns</span> <span class="n">per</span> <span class="nf">loop </span><span class="p">(</span><span class="n">mean</span> <span class="err">±</span> <span class="n">std</span><span class="p">.</span> <span class="n">dev</span><span class="p">.</span> <span class="n">of</span> <span class="mi">7</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span><span class="mi">000</span> <span class="n">loops</span> <span class="n">each</span><span class="p">)</span>
</code></pre></div></div>

<p>However, we quickly got huge gains by using max/min functions directly.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="nf">max</span><span class="p">([</span><span class="n">np</span><span class="p">.</span><span class="nf">min</span><span class="p">([</span><span class="n">X_scalar</span><span class="p">,</span> <span class="n">VMAX</span><span class="p">]),</span> <span class="n">VMIN</span><span class="p">])</span>
<span class="o">&gt;</span> <span class="mf">8.74</span> <span class="n">µs</span> <span class="err">±</span> <span class="mi">141</span> <span class="n">ns</span> <span class="n">per</span> <span class="nf">loop </span><span class="p">(</span><span class="n">mean</span> <span class="err">±</span> <span class="n">std</span><span class="p">.</span> <span class="n">dev</span><span class="p">.</span> <span class="n">of</span> <span class="mi">7</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span><span class="mi">000</span> <span class="n">loops</span> <span class="n">each</span><span class="p">)</span>
</code></pre></div></div>

<p>Using the normal max/min functions proved still faster but not nearly as fast as calling the <code class="language-plaintext highlighter-rouge">umath</code> functions directly.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">VMIN</span> <span class="k">if</span> <span class="n">X_scalar</span> <span class="o">&lt;</span> <span class="n">VMIN</span> <span class="k">else</span> <span class="n">VMAX</span> <span class="k">if</span> <span class="n">X_scalar</span> <span class="o">&gt;</span> <span class="n">VMAX</span> <span class="k">else</span> <span class="n">X_scalar</span>
<span class="o">&gt;</span> <span class="mf">75.2</span> <span class="n">ns</span> <span class="err">±</span> <span class="mf">7.8</span> <span class="n">ns</span> <span class="n">per</span> <span class="nf">loop </span><span class="p">(</span><span class="n">mean</span> <span class="err">±</span> <span class="n">std</span><span class="p">.</span> <span class="n">dev</span><span class="p">.</span> <span class="n">of</span> <span class="mi">7</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span><span class="mi">000</span><span class="p">,</span><span class="mi">000</span> <span class="n">loops</span> <span class="n">each</span><span class="p">)</span>
</code></pre></div></div>

<p>For scalars, there is not much faster than direct logic in python it seems. Huge gains!</p>

<h2 id="array">Array</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_array</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">50000</span><span class="p">)</span> <span class="o">-</span> <span class="n">VMAX</span><span class="p">)</span>
</code></pre></div></div>
<p>Again, testing the baseline:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">X_array</span><span class="p">,</span> <span class="n">VMIN</span><span class="p">,</span> <span class="n">VMAX</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="mi">172</span> <span class="n">µs</span> <span class="err">±</span> <span class="mi">646</span> <span class="n">ns</span> <span class="n">per</span> <span class="nf">loop </span><span class="p">(</span><span class="n">mean</span> <span class="err">±</span> <span class="n">std</span><span class="p">.</span> <span class="n">dev</span><span class="p">.</span> <span class="n">of</span> <span class="mi">7</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span><span class="mi">000</span> <span class="n">loops</span> <span class="n">each</span><span class="p">)</span>
</code></pre></div></div>

<p>This gave us a very slow time of $172\mu s$ which isn’t good enough. Since using the usual min/max functions proved fruitless in the scalar case, we skip it here.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">core</span><span class="p">.</span><span class="n">umath</span><span class="p">.</span><span class="nf">maximum</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">core</span><span class="p">.</span><span class="n">umath</span><span class="p">.</span><span class="nf">minimum</span><span class="p">(</span><span class="n">X_array</span><span class="p">,</span> <span class="n">VMAX</span><span class="p">),</span> <span class="n">VMIN</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="mf">40.9</span> <span class="n">µs</span> <span class="err">±</span> <span class="mi">388</span> <span class="n">ns</span> <span class="n">per</span> <span class="nf">loop </span><span class="p">(</span><span class="n">mean</span> <span class="err">±</span> <span class="n">std</span><span class="p">.</span> <span class="n">dev</span><span class="p">.</span> <span class="n">of</span> <span class="mi">7</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span><span class="mi">000</span> <span class="n">loops</span> <span class="n">each</span><span class="p">)</span>
</code></pre></div></div>

<p>Again, the <code class="language-plaintext highlighter-rouge">umath</code> functions were faster.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="nf">asarray</span><span class="p">([</span><span class="n">VMIN</span> <span class="k">if</span> <span class="n">Xi</span> <span class="o">&lt;</span> <span class="n">VMIN</span> <span class="k">else</span> <span class="n">VMAX</span> <span class="k">if</span> <span class="n">Xi</span> <span class="o">&gt;</span> <span class="n">VMAX</span> <span class="k">else</span> <span class="n">Xi</span> <span class="k">for</span> <span class="n">Xi</span> <span class="ow">in</span> <span class="n">X_array</span><span class="p">])</span>
<span class="o">&gt;</span> <span class="mi">10</span> <span class="n">ms</span> <span class="err">±</span> <span class="mi">140</span> <span class="n">µs</span> <span class="n">per</span> <span class="nf">loop </span><span class="p">(</span><span class="n">mean</span> <span class="err">±</span> <span class="n">std</span><span class="p">.</span> <span class="n">dev</span><span class="p">.</span> <span class="n">of</span> <span class="mi">7</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">100</span> <span class="n">loops</span> <span class="n">each</span><span class="p">)</span>
</code></pre></div></div>

<p>And (as expected honestly) the raw python variation was horribly slow.</p>

<h2 id="conclusion">Conclusion</h2>

<p>For scalars, using <code class="language-plaintext highlighter-rouge">VMIN if X &lt; VMIN else VMAX if X &gt; VMAX else X</code> is 150x faster than normal <code class="language-plaintext highlighter-rouge">np.clip</code>. However, using raw python for arrays is (expectedly) horrible. For this case, using <code class="language-plaintext highlighter-rouge">np.core.umath.maximum(np.core.umath.minimum(X, VMAX), VMIN)</code> is roughly 4x faster than <code class="language-plaintext highlighter-rouge">np.clip</code>.</p>

<h3 id="credit">Credit</h3>

<p>I got most of these ideas from <a href="https://github.com/numpy/numpy/issues/14281">numpy#14281</a> but wanted to verify them for myself.</p>
 ]]></content>
  </entry>

  <entry>
    <title type="text">How To Block YouTube Shorts In Your Feed And Inbox</title>
    <link rel="alternate" type="text/html" href="https://janhendrikewers.uk/how_to_block_youtube_shorts_in_your_feed.html/?source=RSS" />
    <id>https://janhendrikewers.uk/how_to_block_youtube_shorts_in_your_feed</id>
    <published>2023-01-23T00:00:00Z</published>
    <updated>2023-01-23T00:00:00Z</updated>
    <content type="html"><![CDATA[ <p>YouTube shorts are becoming more and more prevalent on the website. I was completely okay with this until my subscriptions and feed were starting to become completely unbearable with their presence. The nature of shorts means that content creators are uploading these clips on a much higher rate than anything else resulting in this mess. Furthermore, there is NO way of doing this natively within the website. Hopefully this short guide will help someone with the same issue.</p>

<h2 id="how-to">How To</h2>

<p>First of all you need to install uBlock Origin (<a href="https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm?hl=en">Chrome</a>, <a href="https://addons.mozilla.org/en-GB/firefox/addon/ublock-origin/">Firefox</a>). Then, open the settings page via the add-on’s pop-up</p>

<p class="centre"><img src="/static/img/2023-01-23-youtube_shorts/a.png" alt="uBlock Origin settings button" class="img-responsive" />
<em>uBlock Origin settings button location</em></p>

<p>Finally, all you need to do is import the custom filter from <a href="https://letsblock.it/filters/youtube-shorts">here</a> within the <em>My filters</em> tab.</p>

<h2 id="results">Results</h2>

<p>This method works exceptionally well. As you can see, there are <strong>NO</strong> shorts in a subset of my subscriptions after implementing this method.</p>

<p class="centre"><img src="/static/img/2023-01-23-youtube_shorts/b.png" alt="Before" class="img-responsive" />
<em>Before</em></p>

<p class="centre"><img src="/static/img/2023-01-23-youtube_shorts/c.png" alt="Before" class="img-responsive" />
<em>After</em></p>
 ]]></content>
  </entry>

  <entry>
    <title type="text">Using GMail&apos;s App Passwords With Paperless-NGX</title>
    <link rel="alternate" type="text/html" href="https://janhendrikewers.uk/gmail_app_password_with_paperless-ngx.html/?source=RSS" />
    <id>https://janhendrikewers.uk/gmail_app_password_with_paperless-ngx</id>
    <published>2022-10-09T00:00:00Z</published>
    <updated>2022-10-09T00:00:00Z</updated>
    <content type="html"><![CDATA[ <p>I saw some errors in my paperless-ngx logs recently:</p>

<pre><code class="language-log">[2022-11-09 15:33:13,556] [ERROR] [paperless_mail] 
  Error while authenticating account paperless gmail: 
    Response status "OK" expected, but "NO" received. 
    Data: [b'[AUTHENTICATIONFAILED] Invalid credentials (Failure)']
</code></pre>

<p>After doing some digging, I discovered the following that will be affecting a lot of Paperless-ngx users with dedicated gmail accounts for ingress.</p>

<p>As of 30/05/2022, <a href="https://support.google.com/accounts/answer/6010255">Google stopped supporting the <em>Less Secure Apps</em> mode</a> which was often used to enable Paperless-NG to work with GMail via IMAP. Now, you need to enable 2FA and then generate an <em>App Password</em> (with instructions <a href="https://support.google.com/accounts/answer/185833">here</a>). This password is then used within paperless-ngx like the account password previously.</p>

<p>For more guidance on how to set up Paperless-ngx with automated email ingress and rules, have a look at my other article <a href="/paperless-ng_on_localy_hosted_rpi.html">here</a></p>

<h2 id="tips">Tips</h2>

<ol>
  <li>Make sure to select <strong>Mail</strong> as the app type. You’ll then want to select <em>Other Custom Name</em> for the device type.
<img src="/static/img/2022-11-09_gmail_with_paperless-ngx/2.png" alt="B" /></li>
  <li>Make sure to use a meaningful name
<img src="/static/img/2022-11-09_gmail_with_paperless-ngx/3.png" alt="C" /></li>
  <li>The app password is only ever shown once so make sure to copy it there and then. It is made up of 16 characters. <strong>DO NOT SHARE OR RE-USE THIS PASSWORD</strong>
<img src="/static/img/2022-11-09_gmail_with_paperless-ngx/4.png" alt="D" /></li>
</ol>
 ]]></content>
  </entry>

  <entry>
    <title type="text">One Python Import Quirk You Need to Know, Or Why The Heck Is That A Function?</title>
    <link rel="alternate" type="text/html" href="https://janhendrikewers.uk/how-do-python-imports-work.html/?source=RSS" />
    <id>https://janhendrikewers.uk/how-do-python-imports-work</id>
    <published>2022-09-12T00:00:00Z</published>
    <updated>2022-09-12T00:00:00Z</updated>
    <content type="html"><![CDATA[ <p>Any budding python program has been there. You’ve just made a wonderful new project with an amazingly descriptive file structure! Well done you!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>foo
├── bar
│   ├── bar.py
│   └── __init__.py
└── __init__.py
</code></pre></div></div>

<p>Now, <code class="language-plaintext highlighter-rouge">foo/__init__.py</code> is empty making foo a module, and since <code class="language-plaintext highlighter-rouge">foo/bar</code> also has a <code class="language-plaintext highlighter-rouge">__init__.py</code> file, it is a submodule. For the purposes of this little demonstration, the files are as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># foo/bar/__init__.py
</span><span class="kn">from</span> <span class="n">.bar</span> <span class="kn">import</span> <span class="n">bar</span>

<span class="c1"># foo/bar/bar.py
</span><span class="s">"""
This is a really important module!
"""</span>

<span class="k">def</span> <span class="nf">bar</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">)</span>
</code></pre></div></div>

<p>Everything works real nicely except you find yourself needing to call <code class="language-plaintext highlighter-rouge">help()</code> on the <code class="language-plaintext highlighter-rouge">bar</code> sub-submodule (i.e. <code class="language-plaintext highlighter-rouge">foo.bar.bar</code> not <code class="language-plaintext highlighter-rouge">foo.bar.bar.bar</code>). How do we do this?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="n">foo.bar</span> <span class="kn">import</span> <span class="n">bar</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nf">help</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
<span class="n">Help</span> <span class="n">on</span> <span class="n">function</span> <span class="n">bar</span> <span class="ow">in</span> <span class="n">module</span> <span class="n">foo</span><span class="p">.</span><span class="n">bar</span><span class="p">.</span><span class="n">bar</span><span class="p">:</span>

<span class="nf">bar</span><span class="p">()</span>
</code></pre></div></div>

<p>Well, that was expected right? Let’s try something different…</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">foo.bar.bar</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nf">help</span><span class="p">(</span><span class="n">foo</span><span class="p">.</span><span class="n">bar</span><span class="p">.</span><span class="n">bar</span><span class="p">)</span>
<span class="n">Help</span> <span class="n">on</span> <span class="n">function</span> <span class="n">bar</span> <span class="ow">in</span> <span class="n">module</span> <span class="n">foo</span><span class="p">.</span><span class="n">bar</span><span class="p">.</span><span class="n">bar</span><span class="p">:</span>

<span class="nf">bar</span><span class="p">()</span>
</code></pre></div></div>

<p>Shoot! Same again.</p>

<p>How about…</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">foo.bar</span> <span class="k">as</span> <span class="n">b</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nf">help</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">bar</span><span class="p">)</span>
<span class="n">Help</span> <span class="n">on</span> <span class="n">function</span> <span class="n">baz</span> <span class="ow">in</span> <span class="n">module</span> <span class="n">foo</span><span class="p">.</span><span class="n">bar</span><span class="p">.</span><span class="n">bar</span><span class="p">:</span>

<span class="nf">baz</span><span class="p">()</span>
</code></pre></div></div>

<p>You see what’s going on here?</p>

<p>Because we’ve named our function the same as the submodule(yes, <code class="language-plaintext highlighter-rouge">bar.py</code> is being treated as a submodule within the submodule <code class="language-plaintext highlighter-rouge">bar</code>), and we’re <strong>OVERWRITING</strong> the submodule’s name in <code class="language-plaintext highlighter-rouge">foo/bar/__init__.py</code>, it’s impossible to access anything within the submodule other than <code class="language-plaintext highlighter-rouge">bar()</code>. However, with an empty init file, we could have called help on the submodule as:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="n">foo.bar</span> <span class="kn">import</span> <span class="n">bar</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nf">help</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
<span class="n">Help</span> <span class="n">on</span> <span class="n">module</span> <span class="n">foo</span><span class="p">.</span><span class="n">bar</span><span class="p">.</span><span class="n">bar</span> <span class="ow">in</span> <span class="n">foo</span><span class="p">.</span><span class="n">bar</span><span class="p">:</span>

<span class="n">NAME</span>
    <span class="n">foo</span><span class="p">.</span><span class="n">bar</span><span class="p">.</span><span class="n">bar</span> <span class="o">-</span> <span class="n">This</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">really</span> <span class="kn">import</span> <span class="n">module</span><span class="err">!</span>

<span class="n">FUNCTIONS</span>
    <span class="nf">bar</span><span class="p">()</span>

<span class="n">FILE</span>
    <span class="n">foo</span><span class="o">/</span><span class="n">bar</span><span class="o">/</span><span class="n">bar</span><span class="p">.</span><span class="n">py</span>
</code></pre></div></div>

<h2 id="key-takeaways">Key Takeaways</h2>

<ol>
  <li>Don’t create additional modules within your source code if not required. A good rule of thumb is that splintering your code into submodules is only necessary if a certain <em>chunk</em> needs more than 1 file</li>
  <li>If you need to make a submodule, then use a blank <code class="language-plaintext highlighter-rouge">__init__.py</code> file if possible</li>
  <li>And if you have to do custom imports in your init file, and if you have to have a submodule called <code class="language-plaintext highlighter-rouge">bar</code>, then name the file <code class="language-plaintext highlighter-rouge">_bar.py</code> and the function something a little more creative such as <code class="language-plaintext highlighter-rouge">Bar</code></li>
</ol>

<p>And another top tip, make good use of the <a href="https://docs.python.org/3/tutorial/modules.html#importing-from-a-package"><code class="language-plaintext highlighter-rouge">__all__</code></a> variable.</p>
 ]]></content>
  </entry>

  <entry>
    <title type="text">Custom Obsidian Templater Daily Notes Template With Dynamic Linking</title>
    <link rel="alternate" type="text/html" href="https://janhendrikewers.uk/obsidian-templater-daily-notes-with-dynamic-linking.html/?source=RSS" />
    <id>https://janhendrikewers.uk/obsidian-templater-daily-notes-with-dynamic-linking</id>
    <published>2022-08-01T00:00:00Z</published>
    <updated>2022-08-01T00:00:00Z</updated>
    <content type="html"><![CDATA[ <p>I’ve recently started using <a href="https://obsidian.md/">Obsidian</a>’s Daily Notes feature to keep track of what I’ve been doing. From the start I wanted to use <a href="https://silentvoid13.github.io/Templater">Templater</a> to dynamically create my daily notes such that <strong>each note to link to the previous one</strong>. And I’m not talking a simple <code class="language-plaintext highlighter-rouge">-1d</code> offset. I’m talking properly analysing the available files to then pick the most recent one akin to a <a href="https://www.geeksforgeeks.org/types-of-linked-list/">Singly Linked List</a></p>

<p>⚠️ First thing first, this isn’t a Templater tutorial so head to the <a href="https://silentvoid13.github.io/Templater/user-functions/overview.html">documentation</a> to learn how to do this yourself.</p>

<p>🧑‍💻 Go <a href="#complete-files">here</a> for the complete code</p>

<h2 id="implementation">Implementation</h2>

<p>Firstly, let’s scrape the file system through the <code class="language-plaintext highlighter-rouge">app.vault</code> api and exclude any notes without <code class="language-plaintext highlighter-rouge">Daily Notes</code> folder and let’s also exclude today’s (hard-coded for now) notes name:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">files</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">vault</span><span class="p">.</span><span class="nf">getMarkdownFiles</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="nx">file</span> <span class="o">=&gt;</span> <span class="nx">file</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">Daily Notes</span><span class="dl">"</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="nx">file</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">file</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">2022-08-01</span><span class="dl">"</span><span class="p">));</span>
</code></pre></div></div>

<p>Next we’ll evaluate how long ago the file was created based on it’s <code class="language-plaintext highlighter-rouge">basename</code></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">now</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">valueOf</span><span class="p">();</span>

  <span class="nx">files</span> <span class="o">=</span> <span class="nx">files</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">file</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">file</span><span class="p">.</span><span class="nx">parsed_time</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">file</span><span class="p">.</span><span class="nx">basename</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">file</span><span class="p">;</span>
  <span class="p">});</span>
</code></pre></div></div>

<p>Finally we’ll sort the array and select the most recent one</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">files</span> <span class="o">=</span> <span class="nx">files</span><span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="p">.</span><span class="nx">parsed_time</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">parsed_time</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="template">Template</h2>

<p>Within a template we just call:</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="err">%</span> <span class="na">tp.user.tag_previous_daily_note</span><span class="err">(</span><span class="na">tp.file.title</span><span class="err">,</span> <span class="err">"</span><span class="na">YOUR</span> <span class="na">DAILY</span> <span class="na">NOTE</span> <span class="na">PATH</span><span class="err">")</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h2 id="complete-files">Complete Files</h2>

<p><code class="language-plaintext highlighter-rouge">tag_previous_daily_note.js</code></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">tag_previous_daily_note</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">{</span>

  <span class="nx">files</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">vault</span><span class="p">.</span><span class="nf">getMarkdownFiles</span><span class="p">().</span><span class="nf">filter</span><span class="p">(</span><span class="nx">file</span> <span class="o">=&gt;</span> <span class="nx">file</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="nx">path</span><span class="p">)).</span><span class="nf">filter</span><span class="p">(</span><span class="nx">file</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">file</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="nx">filename</span><span class="p">));</span>

  <span class="nx">now</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">valueOf</span><span class="p">();</span>

  <span class="nx">files</span> <span class="o">=</span> <span class="nx">files</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">file</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">file</span><span class="p">.</span><span class="nx">parsed_time</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">file</span><span class="p">.</span><span class="nx">basename</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">file</span><span class="p">;</span>
  <span class="p">});</span>

  <span class="nx">files</span> <span class="o">=</span> <span class="nx">files</span><span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="p">.</span><span class="nx">parsed_time</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">parsed_time</span><span class="p">);</span>

  <span class="k">return</span> <span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">basename</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">tag_previous_daily_note</span><span class="p">;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">daily_notes_template.md</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
created: &lt;% tp.file.creation_date() %&gt;
tags: daily/&lt;% tp.date.now("YYYY/MMMM") %&gt;
---

# &lt;%tp.file.title%&gt;
---

**Previous** [[&lt;% tp.user.tag_previous_daily_note(tp.file.title,"Daily Notes")%&gt;]]

---

&lt;% tp.file.cursor(1) %&gt;
</code></pre></div></div>
 ]]></content>
  </entry>

  <entry>
    <title type="text">External Library Documentation URLS for PyCharm</title>
    <link rel="alternate" type="text/html" href="https://janhendrikewers.uk/useful_pycharm_urls.html/?source=RSS" />
    <id>https://janhendrikewers.uk/useful_pycharm_urls</id>
    <published>2022-05-30T00:00:00Z</published>
    <updated>2022-05-30T00:00:00Z</updated>
    <content type="html"><![CDATA[ <p>Being able to hover over modules, classes, functions, etc. of a library and seeing the documentation is always great. This post acts as a resources for you to copy/paste the external documentation URL for your favourite libraries to enable this feature. For more information how to enable this, have a look <a href="#how">here</a></p>

<table>
    <tr><th>Library</th><th>Module</th><th>URL</th></tr>
  
    <tr>
    <td>Matplotlib </td>
    <td><code> matplotlib </code></td>
    <td><code> http://matplotlib.org/api/{module.basename}_api.html#{element.qname} </code></td>
    </tr>
  
    <tr>
    <td>Numpy </td>
    <td><code> numpy </code></td>
    <td><code> https://docs.scipy.org/doc/numpy/reference/generated/{element.qname}.html </code></td>
    </tr>
  
    <tr>
    <td>Pandas </td>
    <td><code> pandas </code></td>
    <td><code> https://pandas.pydata.org/pandas-docs/stable/generated/{element.qname}.html </code></td>
    </tr>
  
    <tr>
    <td>Scikit-Learn </td>
    <td><code>  sklearn </code></td>
    <td><code> https://scikit-learn.org/stable/modules/generated/{element.qname}.html#{element.qname} </code></td>
    </tr>
  
    <tr>
    <td>Scipy </td>
    <td><code> scipy </code></td>
    <td><code> https://docs.scipy.org/doc/scipy/reference/generated/{element.qname}.html </code></td>
    </tr>
  
    <tr>
    <td>Seaborn </td>
    <td><code> seaborn </code></td>
    <td><code> https://seaborn.pydata.org/generated/{module.name}.{element.name}.html#{module.name}.{element.name} </code></td>
    </tr>
  
</table>

<h2 id="how">How</h2>

<ol>
  <li>Go into your settings</li>
  <li>Navigate to <code class="language-plaintext highlighter-rouge">Tools | External Documentation</code></li>
  <li>Press <code class="language-plaintext highlighter-rouge">+</code></li>
  <li>Input the module name and url from above</li>
</ol>

<h2 id="contribute">Contribute</h2>

<p>If you have any useful URLs that you’d like added, please say so in the comments below!</p>
 ]]></content>
  </entry>

  <entry>
    <title type="text">Taking A Step In The General Direction Of Good Git OpSec</title>
    <link rel="alternate" type="text/html" href="https://janhendrikewers.uk/taking_a_step_in_the_general_direction_of_good_git_opsec.html/?source=RSS" />
    <id>https://janhendrikewers.uk/taking_a_step_in_the_general_direction_of_good_git_opsec</id>
    <published>2022-05-09T00:00:00Z</published>
    <updated>2022-05-09T00:00:00Z</updated>
    <content type="html"><![CDATA[ <p>Every morning I tend to browse a few feeds: <a href="https://reddit.com/r/programming">r/programming</a>, <a href="https://reddit.com/r/linux">r/linux</a>, and <a href="https://github.com/trending">Github Trending</a>. That’s how I stumbled across <a href="https://github.com/GitGuardian/ggshield">ggshield</a> and as a result, also <a href="https://rtyley.github.io/bfg-repo-cleaner/">BFG Repo-Cleaner</a>.
I decided to sign up for GitGuardian to see if it’d find anything feeling quite confident. Quickly my hubris was shattered with <strong>31 open secrets</strong>!</p>

<p>Now, full disclosure, 13 of the 31 secrets were in a repository that a friend added me to for some help and another 15 were in private repositories. However, I would consider myself very careful with what I commit so this number was still quite shocking.</p>

<h2 id="the-remedy">The Remedy</h2>

<p>I had a quick look into every <em>incident</em> to see if it actually required attention. One stood out and I cannot believe I did this… I committed my SSH private key.</p>

<p>Some credit where it’s due though, the commit message when deleting it was “jan you’re a moron” and I must have generated a new private key when I realized. Nonetheless, why I didn’t look into cleaning the commit message is beyond me so let’s look into that now.</p>

<p>I previously mentioned the  BFG Repo-Cleaner so I quickly installed that with <code class="language-plaintext highlighter-rouge">yay -S bfg</code>. Looking at <code class="language-plaintext highlighter-rouge">bfg -h</code> I see</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">--delete-folders</span> &lt;glob&gt;  delete folders with the specified names <span class="o">(</span>eg <span class="s1">'.svn'</span>, <span class="s1">'*-tmp'</span> - matches on folder name, not path within repo<span class="o">)</span>
</code></pre></div></div>

<p>which is PERFECT.</p>

<p>Quickly <code class="language-plaintext highlighter-rouge">git clone --mirror REPO_URL</code> (the <code class="language-plaintext highlighter-rouge">--mirror</code> is very important) and cd into the project dir. I ran <code class="language-plaintext highlighter-rouge">bfg --delete-folders "ssh" ./</code> followed by <code class="language-plaintext highlighter-rouge">git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</code> (this big command is printed at the end of the bfg logs to ensure the updates are propagated). One final command, <code class="language-plaintext highlighter-rouge">git push</code>, and now <em>hey presto</em> it’s gone!</p>

<h2 id="post-mortem">Post Mortem</h2>

<p>I learnt a few things today:</p>

<ol>
  <li>No matter how careful I think I am being, I’m only human and will probably <code class="language-plaintext highlighter-rouge">git add</code> something unsavoury without thinking about it.</li>
  <li>Monitor, monitor, and monitor. You can’t catch something if you’re not looking for it.</li>
</ol>

<p>Yes the private key had been changed but it might still be listed as an authorized key on another server. You just don’t know and as such, being proactive about it and cleaning your git history is probably a good idea.</p>
 ]]></content>
  </entry>


</feed>
